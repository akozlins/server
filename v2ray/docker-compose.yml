#

x-service: &service
  logging: { options: { max-size: "1m" } }
  restart: "always"
  stop_grace_period: "5s"
  cap_drop: [ "ALL", ]
  read_only: true
  security_opt: [ "no-new-privileges:true", ]

services:

  server:
    << : *service
    build: { context: ".", dockerfile: "./Dockerfile" }
    environment:
      - "V2RAY_ID=${V2RAY_ID:?}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.v2ray-vmess.rule=PathPrefix(`/v2ray/vmess`)"
      - "traefik.http.routers.v2ray-vmess.service=v2ray-vmess"
      - "traefik.http.services.v2ray-vmess.loadbalancer.server.port=9000"
      - "traefik.http.routers.v2ray-vless.rule=PathPrefix(`/v2ray/vless`)"
      - "traefik.http.routers.v2ray-vless.service=v2ray-vless"
      - "traefik.http.services.v2ray-vless.loadbalancer.server.port=9001"
    networks: [ "inet", "traefik", ]
#    ports: [ "127.0.0.1:9000:9000", ]
    volumes:
      - "./server.yml:/etc/v2ray/config.json:ro"

  client:
    << : *service
    build: { context: ".", dockerfile: "./Dockerfile" }
    environment:
      - "V2RAY_ADDRESS=${V2RAY_ADDRESS:?}"
      - "V2RAY_ID=${V2RAY_ID:?}"
    networks: [ "inet" ]
    ports: [ "127.0.0.1:1080:1080", ]
    volumes:
      - "./client.yml:/etc/v2ray/config.json:ro"
    profiles: [ "TEST", ]

networks:
  inet: { external: true }
  traefik: { external: true }
