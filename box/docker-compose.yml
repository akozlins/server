#

x-service: &service
  dns_search: .
  logging: { options: { max-size: "1m" } }
  restart: "always"
  stop_grace_period: "10s"
  cap_drop: [ "ALL" ]
  read_only: true
  security_opt: [ "no-new-privileges:true" ]

x-lsio: &lsio
  dns_search: .
  logging: { options: { max-size: "1m" } }
  restart: "always"
  stop_grace_period: "10s"
#  cap_drop: [ "ALL" ]
#  read_only: true
  security_opt: [ "no-new-privileges:true" ]

services:

  qbittorrent:
    << : *service
    build: { context: ".", dockerfile: "./Dockerfile.qb" }
    depends_on: [ "unbound", "socks" ]
    dns: "${SUBNET:?}.254"
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.qbittorrent.stripprefix.prefixes=/qbittorrent"
      - "traefik.http.routers.qbittorrent.middlewares=auth@file,qbittorrent"
      - "traefik.http.routers.qbittorrent.rule=PathPrefix(`/qbittorrent/`)"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"
    networks: [ "default", "traefik" ]
    volumes:
      - "./.local/downloads:/home/1000/Downloads"
      - "./.local/qbittorrent:/home/1000/.local/share/qBittorrent"
      - "./.local/qbittorrent:/home/1000/.config/qBittorrent"

  jackett:
    << : *lsio
    image: "lscr.io/linuxserver/jackett"
    depends_on: [ "unbound", "socks" ]
    dns: "${SUBNET:?}.254"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "AUTO_UPDATE=false"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.middlewares=auth@file"
      - "traefik.http.routers.jackett.rule=PathPrefix(`/jackett/`)"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117"
    networks:
      default: { aliases: [ "jackett_default" ] }
      traefik:
    volumes:
      - "./.local/jackett:/config"
      - "./.local/data/blackhole:/downloads"

  sonarr:
    << : *lsio
    image: "lscr.io/linuxserver/sonarr"
    depends_on: [ "unbound", "socks", "sabnzbd" ]
    dns: "${SUBNET:?}.254"
    environment:
      - "PGID=1000"
      - "PUID=1000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.middlewares=auth@file"
      - "traefik.http.routers.sonarr.rule=PathPrefix(`/sonarr/`)"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
    networks: [ "default", "traefik" ]
    volumes:
      - "./.local/sonarr:/config"
      - "./.local/data:/data"

  mylar:
    << : *lsio
    image: "lscr.io/linuxserver/mylar3"
    depends_on: [ "unbound" ]
    dns: "${SUBNET:?}.254"
    environment:
      - "PGID=1000"
      - "PUID=1000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mylar.middlewares=auth@file"
      - "traefik.http.routers.mylar.rule=PathPrefix(`/mylar/`)"
      - "traefik.http.services.mylar.loadbalancer.server.port=8090"
    networks: [ "default", "inet", "traefik" ]
    volumes:
      - "./.local/mylar:/config"
      - "./.local/data/comics:/comics"
      - "./.local/data/downloads:/downloads"
#    profiles: [ "TEST" ]

  sabnzbd:
    << : *lsio
    image: "lscr.io/linuxserver/sabnzbd"
    depends_on: [ "unbound", "socks" ]
    dns: "${SUBNET:?}.254"
    environment:
      - "PGID=1000"
      - "PUID=1000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sabnzbd.middlewares=auth@file"
      - "traefik.http.routers.sabnzbd.rule=PathPrefix(`/sabnzbd/`)"
      - "traefik.http.services.sabnzbd.loadbalancer.server.port=8080"
    networks:
      default: { aliases: [ "sabnzbd_default" ] }
      traefik:
    volumes:
      - "./.local/sabnzbd:/config"
      - "./.local/data:/data"

  socks:
    << : *service
    build: { context: ".", dockerfile: "../v2ray/Dockerfile" }
    depends_on: [ "unbound" ]
    dns: "${SUBNET:?}.254"
    environment:
      - "SOCKS_ADDRESS=${SOCKS_ADDRESS:?}"
      - "SOCKS_PASSWORD=${SOCKS_PASSWORD:?}"
      - "SOCKS_USER=${SOCKS_USER:?}"
    networks:
      default: { aliases: [ "socks_default" ] }
      inet:
    ports: [ "127.0.0.1:1080:1080" ]
    volumes:
      - "./v2ray.yml:/etc/v2ray/config.json:ro"

  unbound:
    << : *service
    build: { context: ".", dockerfile: "../doh/Dockerfile.unbound" }
    networks:
      default: { ipv4_address: "${SUBNET:?}.254" }
      inet:
    volumes:
      - "../doh/unbound.conf:/etc/unbound/unbound.conf:ro"

networks:
  default: { internal: true, ipam: { config: [ subnet: "${SUBNET:?}.0/24" ] } }
  inet: { external: true }
  traefik: { external: true }
