#

x-service: &service
  logging: { options: { max-size: "1m" } }
  restart: "always"
  stop_grace_period: "5s"
  cap_drop: [ "ALL" ]
  read_only: true
  security_opt: [ "no-new-privileges:true" ]
  user: "1000:1000"
  mem_limit: 256m

services:

  sslh:
    << : *service
    image: "akozlins/sslh:v2.3.0"
    command: [ "./sslh-select", "--config=/sslh.cfg",
      "--http=caddy:8080",
      "--ssh=${DOMAIN:?}:1022",
      "--tls=${DOMAIN:?}:443",
      "--socks5=${DOMAIN:?}:1080",
      "--openvpn=${DOMAIN:?}:1194",
      #"--wireguard=${DOMAIN:?}:51820",
      "--anyprot=caddy:8080",
      "--on-timeout=anyprot",
    ]
    depends_on: [ "caddy" ]
    networks: [ "default", "inet" ]
    ports:
    - "0.0.0.0:80:80"
    - "[::]:80:80"
    - "0.0.0.0:80:80/udp"
    volumes:
    - "./sslh.cfg:/sslh.cfg:ro"

  whoami:
    <<: *service
    image: "containous/whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.middlewares=auth@file"
      - "traefik.http.routers.whoami.rule=PathPrefix(`/whoami/`)"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"
    networks: [ "default", "traefik" ]

  caddy:
    <<: *service
    image: "caddy"
    cap_add: [ "CAP_NET_BIND_SERVICE" ]
    environment:
      - "DOMAIN=${DOMAIN:?}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.caddy1.middlewares=security_headers@file"
      - "traefik.http.routers.caddy1.priority=1"
      - "traefik.http.routers.caddy1.rule=PathPrefix(`/`)"
      - "traefik.http.routers.caddy.rule=HostRegexp(`^caddy(-[0-9a-z]+)?[.]`) && PathPrefix(`/`)"
      - "traefik.http.services.caddy.loadbalancer.server.port=80"
    networks: [ "default", "traefik" ]
    volumes:
      - "./Caddyfile:/etc/caddy/Caddyfile:ro"
      - "./html:/opt/html:ro"

networks:
  default: { internal: true }
  inet:  { external: true }
  traefik: { external: true }
