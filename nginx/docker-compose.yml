#

x-service: &service
  logging: { options: { max-size: "1m" } }
  restart: "always"
  stop_grace_period: "5s"

services:

  socat:
    << : *service
    build: "./socat"
    command:
      - "/etc/socat/run.sh"
      - "syncthing.sock:127.0.0.1:8384"
    network_mode: "host"
    volumes:
      - "../etc/socat:/etc/socat:ro"
      - "./.cache/run/socat:/run/socat:rw"

  sslh:
    << : *service
    build: "../etc/sslh"
    command: [ "sslh", "--foreground", "--numeric",
      "--listen=0.0.0.0:80",
      "--ssh=${DOMAIN:?}:1022",
      "--http=caddy:8080",
      "--tls=${DOMAIN:?}:443",
      "--openvpn=${DOMAIN:?}:1194",
      "--anyprot=caddy:8080",
      "--on-timeout=anyprot",
    ]
    depends_on: [ "caddy" ]
    networks: [ "default", "inet" ]
    ports:
    - "0.0.0.0:80:80"
    - "[::]:80:80"

  whoami:
    << : *service
    image: "containous/whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.middlewares=auth@file"
      - "traefik.http.routers.whoami.rule=PathPrefix(`/whoami/`)"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"
    networks: [ "default", "traefik" ]
    user: "1000:1000"

  socat-test:
    << : *service
    build: "./socat"
    command: [ "/usr/bin/socat",
      "TCP4-LISTEN:8080,fork", "TCP4:${DOMAIN:?}:80",
    ]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.socat-test.middlewares=auth@file"
      - "traefik.http.routers.socat-test.rule=HostRegexp(`^test(-[0-9a-z]+)?[.]`) && PathPrefix(`/`)"
      - "traefik.http.services.socat-test.loadbalancer.server.port=8080"
    networks: [ "inet", "traefik" ]
    profiles: [ "TEST" ]

  caddy:
    << : *service
    image: "caddy"
    environment:
      - "DOMAIN=${DOMAIN:?}"
      - "TRAEFIK_SUBNET=${TRAEFIK_SUBNET:?}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.caddy1.middlewares=security_headers@file"
      - "traefik.http.routers.caddy1.priority=1"
      - "traefik.http.routers.caddy1.rule=PathPrefix(`/`)"
      - "traefik.http.routers.caddy.rule=HostRegexp(`^caddy(-[0-9a-z]+)?[.]`) && PathPrefix(`/`)"
      - "traefik.http.services.caddy.loadbalancer.server.port=80"
    networks: [ "default", "traefik" ]
    volumes:
      - "./Caddyfile:/etc/caddy/Caddyfile:ro"
      - "./html:/opt/html:ro"

networks:
  default: { internal: true }
  inet:  { external: true }
  traefik: { external: true }
